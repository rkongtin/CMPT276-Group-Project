<!DOCTYPE html>
<html>
<head>
<script>
// Asynchronously Load the map API (Or simply google API used for this file)
jQuery(function($) {
    var script = document.createElement('script');
    script.src = "//maps.googleapis.com/maps/api/js?sensor=false&callback=initialize";
    document.body.appendChild(script);
});

var school;

function initialize() {
    var map;    //map variable that will be used to display the map
    var bounds = new google.maps.LatLngBounds();
    /*A variable with location info. (contains lat. and long. info.)
      using lat. and long. as input*/
    var sfu = new google.maps.LatLng(49.2789194023, -122.920480877);
    /*A variable for options of the map:
      in this case, center of the map & zoom option are included with the type of the map we use */
    var mapOptions = {
        center:sfu,    //Center of the map that we are going to see; using the variable, sfu, we previously assigned.
        zoom:14,        //Zoom
        mapTypeId:google.maps.MapTypeId.ROADMAP  //Type of the map
      //  mapTypeId: 'roadmap' //original
    };

//added feature

    // Display a map on the page
    // map vairable now has mapOptions properties
    map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
    
    /*This is a variable that helps to show the range of a certain region
      (a blue circle on the map in our case)
    */
    school = new google.maps.Circle({
        center: sfu,             //Center of the circle using variable sfu as we indicated above
        radius: 1000,            //Radius of the circle
        strokeColor: "#0000FF",  //Color of the border of the circle
        strokeOpacity: 0.8,      //opacity of the border
        strokeWeight: 2,         //you know
        fillColor: "#0000FF",    //Color of the circle
        fillOpacity: 0.4         //you know
    });  //
    
    school.setMap(map); // Display the circle on the map
    
    /*
       var markers: A variable for markers(pins).
       You can add multiple markers here;
       each array has 2 data: Name of the marker & lat and long for markers to be indicated
    */
    var markers = [
        <% @houses.each do |house| %>
            ['<%= house.address %>', <%= house.lat %>, <%= house.long %>],
        <% end %>
    ];

    // Info of the marker when clicked
    var infoWindowContent = [
        <% @houses.each do |house| %>
        ['<div class="info_content">' +
        '<h3><%= house.address %></h3>' +
        '<p>Price: $<%= house.price %></p>' +
        '<p>Square Feet: <%= house.sqft %></p>' +
        '<p>Amenities: <%= house.amenities %></p>' +
        '<p>Contact Information: <%= house.contact_info %></p>' + 
        '<p><%= link_to "Show House Information", info_house_path(house) %></p>' + '</div>'],
        <% end %>
    ];

    // Display multiple markers on a map
    var infoWindow = new google.maps.InfoWindow(), marker, i;
    
    /*
      From here, for loop will help us to display multiple markers on the map
      Generally, it will loop through our array of markers & place each one on the map
    */
    for( i = 0; i < markers.length; i++ ) {           //# of looping = # of markers
        /*
          Access to lat and long info from marker variable that we previously made
          and those info will be placed in var position during iteration
        */
        var position = new google.maps.LatLng(markers[i][1], markers[i][2]);
        bounds.extend(position);
        marker = new google.maps.Marker({
            position: position,      //This is going to be the position of the marker using var position above
            map: map,                //apply map properties
            title: markers[i][0]     //title for the marker
        });

        // Allow each marker to have an info window
        /*
          Simply, this function is saying that when 'marker' is 'clicked' let the function(marker, i) begin
        */
        google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
                infoWindow.setContent(infoWindowContent[i][0]);    //Contents are now stored in the marker
                infoWindow.open(map, marker);                      //Now let it display on the map (Need this function in order to display the info when clicked)
            }
        })(marker, i));

        // Automatically center the map fitting all markers on the screen
        map.fitBounds(bounds);
    }

    // Override our map zoom level once our fitBounds function runs (better view of the map by zooming)
    var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
        this.setZoom(14);
        google.maps.event.removeListener(boundsListener);
    });
}

function changeRadius() {
    school.set('radius', parseInt(document.getElementById("distance").value));
}

</script>
</head>

<body>
    <div id="map_canvas" class="mapping"></div><br />
    <p>Select your distance from school in metres(m):</p>
    <input type="number" id="distance" value="1000"><br />
    <button onclick="changeRadius()">Search</button>
</body>
</html>
